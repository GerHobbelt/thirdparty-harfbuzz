<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.25">

  <GlyphOrder>
    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->
    <GlyphID id="0" name=".notdef"/>
    <GlyphID id="1" name="b"/>
  </GlyphOrder>

  <head>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="1.0"/>
    <fontRevision value="2.03"/>
    <checkSumAdjustment value="0xa5c6d4a1"/>
    <magicNumber value="0x5f0f3cf5"/>
    <flags value="00000000 00011011"/>
    <unitsPerEm value="1024"/>
    <created value="Thu Feb 26 11:51:41 2009"/>
    <modified value="Fri Feb 23 19:45:12 2018"/>
    <xMin value="-42"/>
    <yMin value="-237"/>
    <xMax value="1137"/>
    <yMax value="929"/>
    <macStyle value="00000000 00000000"/>
    <lowestRecPPEM value="6"/>
    <fontDirectionHint value="2"/>
    <indexToLocFormat value="0"/>
    <glyphDataFormat value="0"/>
  </head>

  <hhea>
    <tableVersion value="0x00010000"/>
    <ascent value="819"/>
    <descent value="-205"/>
    <lineGap value="256"/>
    <advanceWidthMax value="1241"/>
    <minLeftSideBearing value="-42"/>
    <minRightSideBearing value="-46"/>
    <xMaxExtent value="1137"/>
    <caretSlopeRise value="1"/>
    <caretSlopeRun value="0"/>
    <caretOffset value="0"/>
    <reserved0 value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfHMetrics value="2"/>
  </hhea>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="2"/>
    <maxPoints value="447"/>
    <maxContours value="25"/>
    <maxCompositePoints value="310"/>
    <maxCompositeContours value="11"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="10"/>
    <maxStorage value="31"/>
    <maxFunctionDefs value="50"/>
    <maxInstructionDefs value="24"/>
    <maxStackElements value="512"/>
    <maxSizeOfInstructions value="1466"/>
    <maxComponentElements value="3"/>
    <maxComponentDepth value="1"/>
  </maxp>

  <OS_2>
    <!-- The fields 'usFirstCharIndex' and 'usLastCharIndex'
         will be recalculated by the compiler -->
    <version value="4"/>
    <xAvgCharWidth value="969"/>
    <usWeightClass value="400"/>
    <usWidthClass value="5"/>
    <fsType value="00000000 00000000"/>
    <ySubscriptXSize value="205"/>
    <ySubscriptYSize value="205"/>
    <ySubscriptXOffset value="0"/>
    <ySubscriptYOffset value="287"/>
    <ySuperscriptXSize value="205"/>
    <ySuperscriptYSize value="205"/>
    <ySuperscriptXOffset value="0"/>
    <ySuperscriptYOffset value="963"/>
    <yStrikeoutSize value="102"/>
    <yStrikeoutPosition value="512"/>
    <sFamilyClass value="0"/>
    <panose>
      <bFamilyType value="0"/>
      <bSerifStyle value="0"/>
      <bWeight value="0"/>
      <bProportion value="0"/>
      <bContrast value="0"/>
      <bStrokeVariation value="0"/>
      <bArmStyle value="0"/>
      <bLetterForm value="0"/>
      <bMidline value="0"/>
      <bXHeight value="0"/>
    </panose>
    <ulUnicodeRange1 value="00000000 00000000 00000000 00000001"/>
    <ulUnicodeRange2 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange3 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange4 value="00000000 00000000 00000000 00000000"/>
    <achVendID value="RIXF"/>
    <fsSelection value="00000000 11000000"/>
    <usFirstCharIndex value="98"/>
    <usLastCharIndex value="98"/>
    <sTypoAscender value="819"/>
    <sTypoDescender value="-205"/>
    <sTypoLineGap value="256"/>
    <usWinAscent value="932"/>
    <usWinDescent value="247"/>
    <ulCodePageRange1 value="00000000 00001000 00000000 00000001"/>
    <ulCodePageRange2 value="00000000 00000000 00000000 00000000"/>
    <sxHeight value="480"/>
    <sCapHeight value="755"/>
    <usDefaultChar value="0"/>
    <usBreakChar value="32"/>
    <usMaxContext value="2"/>
  </OS_2>

  <hmtx>
    <mtx name=".notdef" width="1024" lsb="0"/>
    <mtx name="b" width="575" lsb="40"/>
  </hmtx>

  <cmap>
    <tableVersion version="0"/>
    <cmap_format_4 platformID="0" platEncID="3" language="0">
      <map code="0x62" name="b"/><!-- LATIN SMALL LETTER B -->
    </cmap_format_4>
    <cmap_format_4 platformID="3" platEncID="1" language="0">
      <map code="0x62" name="b"/><!-- LATIN SMALL LETTER B -->
    </cmap_format_4>
  </cmap>

  <fpgm>
    <assembly>
      NPUSHB[ ]	/* 30 values pushed */
      29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5
      4 3 2 1 0
      FDEF[ ]	/* FunctionDefinition */
        INSTR147[ ]
        SHP[0]	/* ShiftPointByLastPoint */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        INSTR147[ ]
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR147[ ]
        IP[ ]	/* InterpolatePts */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR147[ ]
        ALIGNRP[ ]	/* AlignRelativePt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR147[ ]
        FLIPPT[ ]	/* FlipPoint */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        INSTR154[ ]
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        INSTR167[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        72
        MPPEM[ ]	/* MeasurePixelPerEm */
        MUL[ ]	/* Multiply */
        MPS[ ]	/* MeasurePointSize */
        DIV[ ]	/* Divide */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        SVTCA[1]	/* SetFPVectorToAxis */
        INSTR161[ ]
        DUP[ ]	/* DuplicateTopStack */
        SVTCA[0]	/* SetFPVectorToAxis */
        INSTR161[ ]
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        LOOPCALL[ ]	/* LoopAndCallFunction */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        SVTCA[1]	/* SetFPVectorToAxis */
        INSTR152[ ]
        DUP[ ]	/* DuplicateTopStack */
        SVTCA[0]	/* SetFPVectorToAxis */
        INSTR152[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR162[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR162[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR162[ ]
        PUSHB[ ]	/* 1 value pushed */
        3
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR162[ ]
        PUSHB[ ]	/* 1 value pushed */
        3
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR162[ ]
        RTG[ ]	/* RoundToGrid */
        INSTR164[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR166[ ]
        RTG[ ]	/* RoundToGrid */
        INSTR164[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR162[ ]
        RTG[ ]	/* RoundToGrid */
        INSTR164[ ]
        PUSHB[ ]	/* 1 value pushed */
        3
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR166[ ]
        RTG[ ]	/* RoundToGrid */
        INSTR164[ ]
        PUSHB[ ]	/* 1 value pushed */
        3
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR162[ ]
        PUSHB[ ]	/* 1 value pushed */
        3
        LOOPCALL[ ]	/* LoopAndCallFunction */
        RTG[ ]	/* RoundToGrid */
        INSTR164[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR166[ ]
        PUSHB[ ]	/* 1 value pushed */
        3
        LOOPCALL[ ]	/* LoopAndCallFunction */
        RTG[ ]	/* RoundToGrid */
        INSTR164[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR162[ ]
        PUSHB[ ]	/* 1 value pushed */
        3
        LOOPCALL[ ]	/* LoopAndCallFunction */
        RTG[ ]	/* RoundToGrid */
        INSTR164[ ]
        PUSHB[ ]	/* 1 value pushed */
        3
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR166[ ]
        PUSHB[ ]	/* 1 value pushed */
        3
        LOOPCALL[ ]	/* LoopAndCallFunction */
        RTG[ ]	/* RoundToGrid */
        INSTR164[ ]
        PUSHB[ ]	/* 1 value pushed */
        3
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        INSTR159[ ]
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        INSTR160[ ]
        DIV[ ]	/* Divide */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        INSTR160[ ]
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        INSTR158[ ]
        ADD[ ]	/* Add */
        ROUND[00]	/* Round */
        INSTR168[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR158[ ]
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        PUSHB[ ]	/* 1 value pushed */
        1
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        INSTR168[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        INSTR170[ ]
        SFVTPV[ ]	/* SetFVectorToPVector */
        INSTR158[ ]
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        PUSHB[ ]	/* 1 value pushed */
        1
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        INSTR168[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        INSTR169[ ]
        SFVTPV[ ]	/* SetFVectorToPVector */
        INSTR158[ ]
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        PUSHB[ ]	/* 1 value pushed */
        1
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        INSTR168[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        INSTR161[ ]
        INSTR158[ ]
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        PUSHB[ ]	/* 1 value pushed */
        1
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        INSTR168[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        INSTR170[ ]
        SFVTPV[ ]	/* SetFVectorToPVector */
        DUP[ ]	/* DuplicateTopStack */
        INSTR161[ ]
        INSTR158[ ]
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        PUSHB[ ]	/* 1 value pushed */
        1
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        INSTR168[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        INSTR169[ ]
        SFVTPV[ ]	/* SetFVectorToPVector */
        DUP[ ]	/* DuplicateTopStack */
        INSTR161[ ]
        INSTR158[ ]
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        PUSHB[ ]	/* 1 value pushed */
        1
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        INSTR168[ ]
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP2[ ]	/* SetZonePointer2 */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 3 values pushed */
        0 0 0
        SVTCA[1]	/* SetFPVectorToAxis */
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 3 values pushed */
        0 0 0
        SVTCA[0]	/* SetFPVectorToAxis */
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
        SWAP[ ]	/* SwapTopStack */
        INSTR147[ ]
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        SDPVTL[0]	/* SetDualPVectorToLine */
        SFVTPV[ ]	/* SetFVectorToPVector */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP2[ ]	/* SetZonePointer2 */
        SCFS[ ]	/* SetCoordFromStackFP */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 3 values pushed */
        0 0 0
        SVTCA[1]	/* SetFPVectorToAxis */
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 3 values pushed */
        0 0 0
        SVTCA[0]	/* SetFPVectorToAxis */
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
        SWAP[ ]	/* SwapTopStack */
        INSTR147[ ]
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        SDPVTL[0]	/* SetDualPVectorToLine */
        SFVTPV[ ]	/* SetFVectorToPVector */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP2[ ]	/* SetZonePointer2 */
        SCFS[ ]	/* SetCoordFromStackFP */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        INSTR147[ ]
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP0[ ]	/* SetZonePointer0 */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP1[ ]	/* SetZonePointer1 */
        PUSHB[ ]	/* 4 values pushed */
        1 2 3 4
        ISECT[ ]	/* MovePtToIntersect */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP0[ ]	/* SetZonePointer0 */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP1[ ]	/* SetZonePointer1 */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP2[ ]	/* SetZonePointer2 */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 8 values pushed */
        1 0 2 0 3 0 4 0
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 8 values pushed */
        1 0 2 0 3 0 4 0
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
      ENDF[ ]	/* EndFunctionDefinition */
      NPUSHB[ ]	/* 24 values pushed */
      170 169 168 167 166 165 164 163 162 161 160 159 158 157 156 155 154 153 152 151 150 149 148 147
      IDEF[ ]	/* InstructionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      30
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      1 0
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      1 1
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      1 2
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      1 3
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      1 4
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      SRP0[ ]	/* SetRefPoint0 */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      SRP1[ ]	/* SetRefPoint1 */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      SRP2[ ]	/* SetRefPoint2 */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      ALIGNPTS[ ]	/* AlignPts */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      GC[0]	/* GetCoordOnPVector */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      MD[0]	/* MeasureDistance */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      MD[1]	/* MeasureDistance */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      MDAP[0]	/* MoveDirectAbsPt */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      MDAP[1]	/* MoveDirectAbsPt */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      MDRP[00000]	/* MoveDirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      MDRP[11100]	/* MoveDirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      SWAP[ ]	/* SwapTopStack */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      MIAP[0]	/* MoveIndirectAbsPt */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      SWAP[ ]	/* SwapTopStack */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      MIAP[1]	/* MoveIndirectAbsPt */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      SWAP[ ]	/* SwapTopStack */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      MSIRP[1]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      SWAP[ ]	/* SwapTopStack */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      SCFS[ ]	/* SetCoordFromStackFP */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      SDPVTL[1]	/* SetDualPVectorToLine */
      ENDF[ ]	/* EndFunctionDefinition */
      IDEF[ ]	/* InstructionDefinition */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      INSTR147[ ]
      SWAP[ ]	/* SwapTopStack */
      SDPVTL[0]	/* SetDualPVectorToLine */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      30
      FDEF[ ]	/* FunctionDefinition */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHW[ ]	/* 1 value pushed */
      8
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 2 values pushed */
      1 1
      INSTCTRL[ ]	/* SetInstrExecControl */
      EIF[ ]	/* EndIf */
      PUSHW[ ]	/* 1 value pushed */
      511
      SCANCTRL[ ]	/* ScanConversionControl */
      PUSHW[ ]	/* 1 value pushed */
      68
      SCVTCI[ ]	/* SetCVTCutIn */
      PUSHW[ ]	/* 2 values pushed */
      8 3
      SDS[ ]	/* SetDeltaShiftInGState */
      SDB[ ]	/* SetDeltaBaseInGState */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      31
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      ROUND[01]	/* Round */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      32
      FDEF[ ]	/* FunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      31
      LOOPCALL[ ]	/* LoopAndCallFunction */
      POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      33
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      GC[0]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      3
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      MD[0]	/* MeasureDistance */
      ABS[ ]	/* Absolute */
      ROLL[ ]	/* RollTopThreeStack */
      DUP[ ]	/* DuplicateTopStack */
      GC[0]	/* GetCoordOnPVector */
      DUP[ ]	/* DuplicateTopStack */
      ROUND[00]	/* Round */
      SUB[ ]	/* Subtract */
      ABS[ ]	/* Absolute */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      DUP[ ]	/* DuplicateTopStack */
      ROUND[00]	/* Round */
      SUB[ ]	/* Subtract */
      ABS[ ]	/* Absolute */
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      NEG[ ]	/* Negate */
      ROLL[ ]	/* RollTopThreeStack */
      EIF[ ]	/* EndIf */
      MDAP[1]	/* MoveDirectAbsPt */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      ROUND[01]	/* Round */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      EQ[ ]	/* Equal */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      64
      EIF[ ]	/* EndIf */
      ELSE[ ]	/* Else */
      ROUND[01]	/* Round */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      EQ[ ]	/* Equal */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      64
      NEG[ ]	/* Negate */
      EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      34
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      GC[0]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      GC[0]	/* GetCoordOnPVector */
      DUP[ ]	/* DuplicateTopStack */
      ROUND[10]	/* Round */
      SUB[ ]	/* Subtract */
      ABS[ ]	/* Absolute */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      DUP[ ]	/* DuplicateTopStack */
      ROUND[10]	/* Round */
      SUB[ ]	/* Subtract */
      ABS[ ]	/* Absolute */
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      EIF[ ]	/* EndIf */
      MDAP[1]	/* MoveDirectAbsPt */
      MIRP[11101]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      35
      FDEF[ ]	/* FunctionDefinition */
      MPPEM[ ]	/* MeasurePixelPerEm */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      LTEQ[ ]	/* LessThenOrEqual */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      128
      WCVTP[ ]	/* WriteCVTInPixels */
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      64
      WCVTP[ ]	/* WriteCVTInPixels */
      EIF[ ]	/* EndIf */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      POP[ ]	/* PopTopStack */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      PUSHB[ ]	/* 1 value pushed */
      192
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      192
      WCVTP[ ]	/* WriteCVTInPixels */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      36
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      ROUND[01]	/* Round */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      RDTG[ ]	/* RoundDownToGrid */
      ROUND[01]	/* Round */
      RTG[ ]	/* RoundToGrid */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      37
      FDEF[ ]	/* FunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      36
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      38
      FDEF[ ]	/* FunctionDefinition */
      MPPEM[ ]	/* MeasurePixelPerEm */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      0
      EIF[ ]	/* EndIf */
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      128
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      ELSE[ ]	/* Else */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      PUSHW[ ]	/* 1 value pushed */
      192
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      ELSE[ ]	/* Else */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      PUSHW[ ]	/* 1 value pushed */
      256
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      ELSE[ ]	/* Else */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      PUSHW[ ]	/* 1 value pushed */
      320
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      ELSE[ ]	/* Else */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      PUSHW[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      3
      CINDEX[ ]	/* CopyXToTopStack */
      RCVT[ ]	/* ReadCVT */
      PUSHW[ ]	/* 1 value pushed */
      384
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      PUSHW[ ]	/* 1 value pushed */
      384
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      3
      CINDEX[ ]	/* CopyXToTopStack */
      RCVT[ ]	/* ReadCVT */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      39
      FDEF[ ]	/* FunctionDefinition */
      MPPEM[ ]	/* MeasurePixelPerEm */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      RCVT[ ]	/* ReadCVT */
      WCVTP[ ]	/* WriteCVTInPixels */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      40
      FDEF[ ]	/* FunctionDefinition */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHW[ ]	/* 1 value pushed */
      9
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 2 values pushed */
      1 1
      INSTCTRL[ ]	/* SetInstrExecControl */
      EIF[ ]	/* EndIf */
      PUSHW[ ]	/* 1 value pushed */
      511
      SCANCTRL[ ]	/* ScanConversionControl */
      PUSHW[ ]	/* 1 value pushed */
      68
      SCVTCI[ ]	/* SetCVTCutIn */
      PUSHW[ ]	/* 2 values pushed */
      9 3
      SDS[ ]	/* SetDeltaShiftInGState */
      SDB[ ]	/* SetDeltaBaseInGState */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      41
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      ROUND[01]	/* Round */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      42
      FDEF[ ]	/* FunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      41
      LOOPCALL[ ]	/* LoopAndCallFunction */
      POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      43
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      GC[0]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      3
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      MD[0]	/* MeasureDistance */
      ABS[ ]	/* Absolute */
      ROLL[ ]	/* RollTopThreeStack */
      DUP[ ]	/* DuplicateTopStack */
      GC[0]	/* GetCoordOnPVector */
      DUP[ ]	/* DuplicateTopStack */
      ROUND[00]	/* Round */
      SUB[ ]	/* Subtract */
      ABS[ ]	/* Absolute */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      DUP[ ]	/* DuplicateTopStack */
      ROUND[00]	/* Round */
      SUB[ ]	/* Subtract */
      ABS[ ]	/* Absolute */
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      NEG[ ]	/* Negate */
      ROLL[ ]	/* RollTopThreeStack */
      EIF[ ]	/* EndIf */
      MDAP[1]	/* MoveDirectAbsPt */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      ROUND[01]	/* Round */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      EQ[ ]	/* Equal */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      64
      EIF[ ]	/* EndIf */
      ELSE[ ]	/* Else */
      ROUND[01]	/* Round */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      EQ[ ]	/* Equal */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      64
      NEG[ ]	/* Negate */
      EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      44
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      GC[0]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      GC[0]	/* GetCoordOnPVector */
      DUP[ ]	/* DuplicateTopStack */
      ROUND[10]	/* Round */
      SUB[ ]	/* Subtract */
      ABS[ ]	/* Absolute */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      DUP[ ]	/* DuplicateTopStack */
      ROUND[10]	/* Round */
      SUB[ ]	/* Subtract */
      ABS[ ]	/* Absolute */
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      EIF[ ]	/* EndIf */
      MDAP[1]	/* MoveDirectAbsPt */
      MIRP[11101]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      45
      FDEF[ ]	/* FunctionDefinition */
      MPPEM[ ]	/* MeasurePixelPerEm */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      LTEQ[ ]	/* LessThenOrEqual */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      128
      WCVTP[ ]	/* WriteCVTInPixels */
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      64
      WCVTP[ ]	/* WriteCVTInPixels */
      EIF[ ]	/* EndIf */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      POP[ ]	/* PopTopStack */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      PUSHB[ ]	/* 1 value pushed */
      192
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      192
      WCVTP[ ]	/* WriteCVTInPixels */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      46
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      ROUND[01]	/* Round */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      RDTG[ ]	/* RoundDownToGrid */
      ROUND[01]	/* Round */
      RTG[ ]	/* RoundToGrid */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      47
      FDEF[ ]	/* FunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      46
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      48
      FDEF[ ]	/* FunctionDefinition */
      MPPEM[ ]	/* MeasurePixelPerEm */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      0
      EIF[ ]	/* EndIf */
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      128
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      ELSE[ ]	/* Else */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      PUSHW[ ]	/* 1 value pushed */
      192
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      ELSE[ ]	/* Else */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      PUSHW[ ]	/* 1 value pushed */
      256
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      ELSE[ ]	/* Else */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      PUSHW[ ]	/* 1 value pushed */
      320
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      ELSE[ ]	/* Else */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      PUSHW[ ]	/* 1 value pushed */
      3
      MINDEX[ ]	/* MoveXToTopStack */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      3
      CINDEX[ ]	/* CopyXToTopStack */
      RCVT[ ]	/* ReadCVT */
      PUSHW[ ]	/* 1 value pushed */
      384
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      PUSHW[ ]	/* 1 value pushed */
      384
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      3
      CINDEX[ ]	/* CopyXToTopStack */
      RCVT[ ]	/* ReadCVT */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      49
      FDEF[ ]	/* FunctionDefinition */
      MPPEM[ ]	/* MeasurePixelPerEm */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      RCVT[ ]	/* ReadCVT */
      WCVTP[ ]	/* WriteCVTInPixels */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
    </assembly>
  </fpgm>

  <prep>
    <assembly>
      PUSHW[ ]	/* 1 value pushed */
      40
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      PUSHW[ ]	/* 3 values pushed */
      5 15 42
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      PUSHW[ ]	/* 8 values pushed */
      18 85 73 57 41 25 0 48
      CALL[ ]	/* CallFunction */
      PUSHW[ ]	/* 8 values pushed */
      19 94 73 57 41 25 0 48
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHW[ ]	/* 8 values pushed */
      14 128 114 88 66 40 0 48
      CALL[ ]	/* CallFunction */
      PUSHW[ ]	/* 8 values pushed */
      15 161 132 103 66 40 0 48
      CALL[ ]	/* CallFunction */
      PUSHW[ ]	/* 8 values pushed */
      16 149 114 88 66 40 0 48
      CALL[ ]	/* CallFunction */
      PUSHW[ ]	/* 8 values pushed */
      17 138 114 88 66 40 0 48
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHW[ ]	/* 3 values pushed */
      20 4 47
      CALL[ ]	/* CallFunction */
      PUSHW[ ]	/* 1 value pushed */
      13
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      RDTG[ ]	/* RoundDownToGrid */
      ROUND[01]	/* Round */
      RTG[ ]	/* RoundToGrid */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHW[ ]	/* 1 value pushed */
      30
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      PUSHW[ ]	/* 3 values pushed */
      2 3 32
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      PUSHW[ ]	/* 8 values pushed */
      4 83 68 53 38 23 0 38
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHW[ ]	/* 8 values pushed */
      3 153 125 97 70 42 0 38
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHW[ ]	/* 3 values pushed */
      5 4 37
      CALL[ ]	/* CallFunction */
      PUSHW[ ]	/* 1 value pushed */
      2
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      RDTG[ ]	/* RoundDownToGrid */
      ROUND[01]	/* Round */
      RTG[ ]	/* RoundToGrid */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 3 values pushed */
      30 0 1
      PUSHW[ ]	/* 1 value pushed */
      511
      SCANCTRL[ ]	/* ScanConversionControl */
      SCANTYPE[ ]	/* ScanType */
      WS[ ]	/* WriteStore */
    </assembly>
  </prep>

  <cvt>
    <cv index="0" value="0"/>
    <cv index="1" value="0"/>
    <cv index="2" value="21"/>
    <cv index="3" value="37"/>
    <cv index="4" value="68"/>
    <cv index="5" value="-91"/>
    <cv index="6" value="29"/>
    <cv index="7" value="-238"/>
    <cv index="8" value="0"/>
    <cv index="9" value="501"/>
    <cv index="10" value="0"/>
    <cv index="11" value="808"/>
    <cv index="12" value="40"/>
    <cv index="13" value="21"/>
    <cv index="14" value="44"/>
    <cv index="15" value="35"/>
    <cv index="16" value="38"/>
    <cv index="17" value="41"/>
    <cv index="18" value="67"/>
    <cv index="19" value="60"/>
    <cv index="20" value="0"/>
    <cv index="21" value="9"/>
    <cv index="22" value="-237"/>
    <cv index="23" value="0"/>
    <cv index="24" value="481"/>
    <cv index="25" value="15"/>
    <cv index="26" value="755"/>
    <cv index="27" value="30"/>
  </cvt>

  <loca>
    <!-- The 'loca' table will be calculated by the compiler -->
  </loca>

  <glyf>

    <!-- The xMin, yMin, xMax and yMax values
         will be recalculated by the compiler. -->

    <TTGlyph name=".notdef"/><!-- contains no outline data -->

    <TTGlyph name="b" xMin="40" yMin="-9" xMax="529" yMax="818">
      <contour>
        <pt x="174" y="818" on="1"/>
        <pt x="171" y="791" on="0"/>
        <pt x="169" y="730" on="0"/>
        <pt x="169" y="706" on="1"/>
        <pt x="169" y="403" on="1"/>
        <pt x="185" y="418" on="0"/>
        <pt x="228" y="450" on="0"/>
        <pt x="251" y="464" on="1"/>
        <pt x="274" y="478" on="0"/>
        <pt x="321" y="496" on="0"/>
        <pt x="341" y="496" on="1"/>
        <pt x="383" y="496" on="0"/>
        <pt x="453" y="458" on="0"/>
        <pt x="477" y="427" on="1"/>
        <pt x="502" y="396" on="0"/>
        <pt x="529" y="315" on="0"/>
        <pt x="529" y="272" on="1"/>
        <pt x="529" y="215" on="0"/>
        <pt x="492" y="113" on="0"/>
        <pt x="460" y="74" on="1"/>
        <pt x="427" y="36" on="0"/>
        <pt x="338" y="-9" on="0"/>
        <pt x="285" y="-9" on="1"/>
        <pt x="237" y="-9" on="0"/>
        <pt x="155" y="20" on="0"/>
        <pt x="133" y="33" on="1"/>
        <pt x="109" y="5" on="1"/>
        <pt x="91" y="13" on="1"/>
        <pt x="98" y="60" on="0"/>
        <pt x="108" y="157" on="0"/>
        <pt x="108" y="206" on="1"/>
        <pt x="108" y="668" on="1"/>
        <pt x="108" y="694" on="0"/>
        <pt x="103" y="725" on="0"/>
        <pt x="95" y="734" on="1"/>
        <pt x="88" y="742" on="0"/>
        <pt x="61" y="746" on="0"/>
        <pt x="40" y="746" on="1"/>
        <pt x="40" y="766" on="1"/>
        <pt x="72" y="772" on="0"/>
        <pt x="133" y="797" on="0"/>
        <pt x="156" y="818" on="1"/>
      </contour>
      <contour>
        <pt x="169" y="127" on="1"/>
        <pt x="169" y="80" on="0"/>
        <pt x="227" y="21" on="0"/>
        <pt x="290" y="21" on="1"/>
        <pt x="337" y="21" on="0"/>
        <pt x="405" y="58" on="0"/>
        <pt x="426" y="87" on="1"/>
        <pt x="448" y="117" on="0"/>
        <pt x="468" y="190" on="0"/>
        <pt x="468" y="227" on="1"/>
        <pt x="468" y="321" on="0"/>
        <pt x="385" y="445" on="0"/>
        <pt x="314" y="445" on="1"/>
        <pt x="277" y="445" on="0"/>
        <pt x="196" y="395" on="0"/>
        <pt x="169" y="367" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHW[ ]	/* 1 value pushed */
          40
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHW[ ]	/* 1 value pushed */
          13
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            38
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            38 26
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          13
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            10
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            10 24
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          13
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            22
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            22 20
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 3 values pushed */
          4 22 38
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHW[ ]	/* 1 value pushed */
          38
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 1 value pushed */
          37
          MDRP[11100]	/* MoveDirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          22
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 1 value pushed */
          45
          MDRP[11100]	/* MoveDirectRelPt */
          NPUSHW[ ]	/* 27 values pushed */
          7 45 23 45 39 45 55 45 71 45 87 45 103 45 119 45 135 45 151 45 167 45 183 45 199
          45 13
          DELTAP1[ ]	/* DeltaExceptionP1 */
          NPUSHW[ ]	/* 5 values pushed */
          214 45 230 45 2
          DELTAP1[ ]	/* DeltaExceptionP1 */
          PUSHW[ ]	/* 1 value pushed */
          10
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 1 value pushed */
          54
          MDRP[11100]	/* MoveDirectRelPt */
          NPUSHW[ ]	/* 5 values pushed */
          217 54 233 54 2
          DELTAP1[ ]	/* DeltaExceptionP1 */
          NPUSHW[ ]	/* 27 values pushed */
          8 54 24 54 40 54 56 54 72 54 88 54 104 54 120 54 136 54 152 54 168 54 184 54 200
          54 13
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SVTCA[1]	/* SetFPVectorToAxis */
          PUSHW[ ]	/* 1 value pushed */
          58
          MDAP[1]	/* MoveDirectAbsPt */
          PUSHW[ ]	/* 1 value pushed */
          51
          MDAP[1]	/* MoveDirectAbsPt */
          PUSHW[ ]	/* 1 value pushed */
          58
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 1 value pushed */
          30
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          30
          MDAP[1]	/* MoveDirectAbsPt */
          PUSHW[ ]	/* 1 value pushed */
          42
          MDRP[11100]	/* MoveDirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          0
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          0
          MDAP[1]	/* MoveDirectAbsPt */
          PUSHW[ ]	/* 1 value pushed */
          42
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 1 value pushed */
          3
          MDRP[10000]	/* MoveDirectRelPt */
          NPUSHW[ ]	/* 5 values pushed */
          218 51 234 51 2
          DELTAP1[ ]	/* DeltaExceptionP1 */
          NPUSHW[ ]	/* 27 values pushed */
          9 51 25 51 41 51 57 51 73 51 89 51 105 51 121 51 137 51 153 51 169 51 185 51 201
          51 13
          DELTAP1[ ]	/* DeltaExceptionP1 */
          PUSHW[ ]	/* 1 value pushed */
          51
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 1 value pushed */
          16
          MDRP[11100]	/* MoveDirectRelPt */
          PUSHW[ ]	/* 3 values pushed */
          4 30 16
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHW[ ]	/* 1 value pushed */
          30
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 1 value pushed */
          26
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          26
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

  </glyf>

  <name>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x409">
      Copyright © 2010 NHN Corporation. All rights reserved. Font designed by FONTRIX.
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x409">
      NanumMyeongjo
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x409">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x409">
      2.030;RIXF;NanumMyeongjo
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x409">
      NanumMyeongjo
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x409">
      Version 2.030;PS 1;hotconv 1.0.56;makeotf.lib2.0.21325
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x409">
      NanumMyeongjo
    </namerecord>
  </name>

  <post>
    <formatType value="3.0"/>
    <italicAngle value="0.0"/>
    <underlinePosition value="-260"/>
    <underlineThickness value="50"/>
    <isFixedPitch value="0"/>
    <minMemType42 value="0"/>
    <maxMemType42 value="0"/>
    <minMemType1 value="0"/>
    <maxMemType1 value="0"/>
  </post>

  <gasp>
    <gaspRange rangeMaxPPEM="65535" rangeGaspBehavior="15"/>
  </gasp>

</ttFont>
