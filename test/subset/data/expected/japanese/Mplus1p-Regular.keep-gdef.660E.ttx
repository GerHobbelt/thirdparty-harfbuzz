<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.25">

  <GlyphOrder>
    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->
    <GlyphID id="0" name=".notdef"/>
    <GlyphID id="1" name="uni660E"/>
  </GlyphOrder>

  <head>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="1.0"/>
    <fontRevision value="1.06099"/>
    <checkSumAdjustment value="0xc5fd3f77"/>
    <magicNumber value="0x5f0f3cf5"/>
    <flags value="00000010 00101011"/>
    <unitsPerEm value="1000"/>
    <created value="Tue Apr 12 05:33:16 2016"/>
    <modified value="Thu May  3 18:21:19 2018"/>
    <xMin value="-115"/>
    <yMin value="-343"/>
    <xMax value="1403"/>
    <yMax value="1075"/>
    <macStyle value="00000000 00000000"/>
    <lowestRecPPEM value="8"/>
    <fontDirectionHint value="0"/>
    <indexToLocFormat value="0"/>
    <glyphDataFormat value="0"/>
  </head>

  <hhea>
    <tableVersion value="0x00010000"/>
    <ascent value="1075"/>
    <descent value="-320"/>
    <lineGap value="90"/>
    <advanceWidthMax value="1428"/>
    <minLeftSideBearing value="-115"/>
    <minRightSideBearing value="-920"/>
    <xMaxExtent value="1403"/>
    <caretSlopeRise value="1"/>
    <caretSlopeRun value="0"/>
    <caretOffset value="0"/>
    <reserved0 value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfHMetrics value="2"/>
  </hhea>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="2"/>
    <maxPoints value="209"/>
    <maxContours value="22"/>
    <maxCompositePoints value="128"/>
    <maxCompositeContours value="12"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="1"/>
    <maxStorage value="2"/>
    <maxFunctionDefs value="22"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="256"/>
    <maxSizeOfInstructions value="46"/>
    <maxComponentElements value="1"/>
    <maxComponentDepth value="1"/>
  </maxp>

  <OS_2>
    <!-- The fields 'usFirstCharIndex' and 'usLastCharIndex'
         will be recalculated by the compiler -->
    <version value="1"/>
    <xAvgCharWidth value="907"/>
    <usWeightClass value="400"/>
    <usWidthClass value="5"/>
    <fsType value="00000000 00000000"/>
    <ySubscriptXSize value="650"/>
    <ySubscriptYSize value="700"/>
    <ySubscriptXOffset value="0"/>
    <ySubscriptYOffset value="140"/>
    <ySuperscriptXSize value="650"/>
    <ySuperscriptYSize value="700"/>
    <ySuperscriptXOffset value="0"/>
    <ySuperscriptYOffset value="480"/>
    <yStrikeoutSize value="49"/>
    <yStrikeoutPosition value="258"/>
    <sFamilyClass value="2054"/>
    <panose>
      <bFamilyType value="2"/>
      <bSerifStyle value="11"/>
      <bWeight value="5"/>
      <bProportion value="2"/>
      <bContrast value="2"/>
      <bStrokeVariation value="2"/>
      <bArmStyle value="3"/>
      <bLetterForm value="2"/>
      <bMidline value="2"/>
      <bXHeight value="7"/>
    </panose>
    <ulUnicodeRange1 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange2 value="00001000 00000000 00000000 00000000"/>
    <ulUnicodeRange3 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange4 value="00000000 00000000 00000000 00000000"/>
    <achVendID value="M+  "/>
    <fsSelection value="00000000 01000000"/>
    <usFirstCharIndex value="26126"/>
    <usLastCharIndex value="26126"/>
    <sTypoAscender value="860"/>
    <sTypoDescender value="-140"/>
    <sTypoLineGap value="90"/>
    <usWinAscent value="1075"/>
    <usWinDescent value="320"/>
    <ulCodePageRange1 value="01100000 00010010 00000001 10111111"/>
    <ulCodePageRange2 value="11011111 11110111 00000000 00000000"/>
  </OS_2>

  <hmtx>
    <mtx name=".notdef" width="364" lsb="33"/>
    <mtx name="uni660E" width="1000" lsb="90"/>
  </hmtx>

  <cmap>
    <tableVersion version="0"/>
    <cmap_format_4 platformID="0" platEncID="3" language="0">
      <map code="0x660e" name="uni660E"/><!-- CJK UNIFIED IDEOGRAPH-660E -->
    </cmap_format_4>
    <cmap_format_4 platformID="3" platEncID="1" language="0">
      <map code="0x660e" name="uni660E"/><!-- CJK UNIFIED IDEOGRAPH-660E -->
    </cmap_format_4>
    <cmap_format_12 platformID="3" platEncID="10" format="12" reserved="0" length="28" language="0" nGroups="1">
      <map code="0x660e" name="uni660E"/><!-- CJK UNIFIED IDEOGRAPH-660E -->
    </cmap_format_12>
  </cmap>

  <fpgm>
    <assembly>
      PUSHB[ ]	/* 1 value pushed */
      0
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP0[ ]	/* SetZonePointer0 */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        42
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          74
          SROUND[ ]	/* SuperRound */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        0
        SWAP[ ]	/* SwapTopStack */
        MIAP[1]	/* MoveIndirectAbsPt */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        6
        CALL[ ]	/* CallFunction */
        IF[ ]	/* If */
          RTDG[ ]	/* RoundToDoubleGrid */
        EIF[ ]	/* EndIf */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        42
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          RDTG[ ]	/* RoundDownToGrid */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        MDRP[10100]	/* MoveDirectRelPt */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP0[ ]	/* SetZonePointer0 */
        MDAP[0]	/* MoveDirectAbsPt */
        RTG[ ]	/* RoundToGrid */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      1
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        MDRP[11010]	/* MoveDirectRelPt */
        PUSHB[ ]	/* 1 value pushed */
        12
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      2
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      3
      FDEF[ ]	/* FunctionDefinition */
        ROUND[01]	/* Round */
        RTG[ ]	/* RoundToGrid */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        64
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      4
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        6
        CALL[ ]	/* CallFunction */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          ROFF[ ]	/* RoundOff */
          IF[ ]	/* If */
            MDRP[11101]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            MDRP[01101]	/* MoveDirectRelPt */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            IF[ ]	/* If */
              MIRP[11101]	/* MoveIndirectRelPt */
            ELSE[ ]	/* Else */
              MIRP[01101]	/* MoveIndirectRelPt */
            EIF[ ]	/* EndIf */
          ELSE[ ]	/* Else */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 1 value pushed */
            5
            CALL[ ]	/* CallFunction */
            IF[ ]	/* If */
              PUSHB[ ]	/* 1 value pushed */
              70
              SROUND[ ]	/* SuperRound */
            EIF[ ]	/* EndIf */
            IF[ ]	/* If */
              MDRP[11101]	/* MoveDirectRelPt */
            ELSE[ ]	/* Else */
              MDRP[01101]	/* MoveDirectRelPt */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        RTG[ ]	/* RoundToGrid */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      5
      FDEF[ ]	/* FunctionDefinition */
        GFV[ ]	/* GetFVector */
        NOT[ ]	/* LogicalNot */
        AND[ ]	/* LogicalAnd */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      6
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        34 1
        GETINFO[ ]	/* GetInfo */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          32
          GETINFO[ ]	/* GetInfo */
          NOT[ ]	/* LogicalNot */
          NOT[ ]	/* LogicalNot */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          0
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      7
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        36 1
        GETINFO[ ]	/* GetInfo */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          GETINFO[ ]	/* GetInfo */
          NOT[ ]	/* LogicalNot */
          NOT[ ]	/* LogicalNot */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          0
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      8
      FDEF[ ]	/* FunctionDefinition */
        SRP2[ ]	/* SetRefPoint2 */
        SRP1[ ]	/* SetRefPoint1 */
        DUP[ ]	/* DuplicateTopStack */
        IP[ ]	/* InterpolatePts */
        MDAP[1]	/* MoveDirectAbsPt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      9
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RDTG[ ]	/* RoundDownToGrid */
        PUSHB[ ]	/* 1 value pushed */
        6
        CALL[ ]	/* CallFunction */
        IF[ ]	/* If */
          MDRP[00100]	/* MoveDirectRelPt */
        ELSE[ ]	/* Else */
          MDRP[01101]	/* MoveDirectRelPt */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          ROLL[ ]	/* RollTopThreeStack */
          NEG[ ]	/* Negate */
          ROLL[ ]	/* RollTopThreeStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        RTG[ ]	/* RoundToGrid */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      10
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        6
        CALL[ ]	/* CallFunction */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          SRP0[ ]	/* SetRefPoint0 */
        ELSE[ ]	/* Else */
          SRP0[ ]	/* SetRefPoint0 */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      11
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        MDRP[10010]	/* MoveDirectRelPt */
        PUSHB[ ]	/* 1 value pushed */
        12
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      12
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[1]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        7
        CALL[ ]	/* CallFunction */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[0]	/* GetCoordOnPVector */
          SUB[ ]	/* Subtract */
          ROUND[10]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          IF[ ]	/* If */
            DUP[ ]	/* DuplicateTopStack */
            ABS[ ]	/* Absolute */
            DIV[ ]	/* Divide */
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      13
      FDEF[ ]	/* FunctionDefinition */
        SRP2[ ]	/* SetRefPoint2 */
        SRP1[ ]	/* SetRefPoint1 */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        IP[ ]	/* InterpolatePts */
        MDAP[1]	/* MoveDirectAbsPt */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        ROLL[ ]	/* RollTopThreeStack */
        GC[0]	/* GetCoordOnPVector */
        SUB[ ]	/* Subtract */
        SWAP[ ]	/* SwapTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            NEG[ ]	/* Negate */
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      14
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        6
        CALL[ ]	/* CallFunction */
        IF[ ]	/* If */
          RTDG[ ]	/* RoundToDoubleGrid */
          MDRP[10110]	/* MoveDirectRelPt */
          RTG[ ]	/* RoundToGrid */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          MDRP[10110]	/* MoveDirectRelPt */
          ROLL[ ]	/* RollTopThreeStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            DUP[ ]	/* DuplicateTopStack */
            ROLL[ ]	/* RollTopThreeStack */
            SWAP[ ]	/* SwapTopStack */
            MD[0]	/* MeasureDistance */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            0
            NEQ[ ]	/* NotEqual */
            IF[ ]	/* If */
              SHPIX[ ]	/* ShiftZoneByPixel */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
              POP[ ]	/* PopTopStack */
            EIF[ ]	/* EndIf */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      15
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDRP[10110]	/* MoveDirectRelPt */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[1]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        7
        CALL[ ]	/* CallFunction */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          IF[ ]	/* If */
            MPPEM[ ]	/* MeasurePixelPerEm */
            GTEQ[ ]	/* GreaterThanOrEqual */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 1 value pushed */
            1
          EIF[ ]	/* EndIf */
          IF[ ]	/* If */
            ROLL[ ]	/* RollTopThreeStack */
            PUSHB[ ]	/* 1 value pushed */
            4
            MINDEX[ ]	/* MoveXToTopStack */
            MD[0]	/* MeasureDistance */
            SWAP[ ]	/* SwapTopStack */
            ROLL[ ]	/* RollTopThreeStack */
            SWAP[ ]	/* SwapTopStack */
            DUP[ ]	/* DuplicateTopStack */
            ROLL[ ]	/* RollTopThreeStack */
            MD[0]	/* MeasureDistance */
            ROLL[ ]	/* RollTopThreeStack */
            SWAP[ ]	/* SwapTopStack */
            SUB[ ]	/* Subtract */
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      16
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        MDRP[11010]	/* MoveDirectRelPt */
        PUSHB[ ]	/* 1 value pushed */
        18
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      17
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        MDRP[10010]	/* MoveDirectRelPt */
        PUSHB[ ]	/* 1 value pushed */
        18
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      18
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        MDAP[1]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        7
        CALL[ ]	/* CallFunction */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[0]	/* GetCoordOnPVector */
          SUB[ ]	/* Subtract */
          ROUND[10]	/* Round */
          ROLL[ ]	/* RollTopThreeStack */
          DUP[ ]	/* DuplicateTopStack */
          GC[1]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[0]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          ROUND[10]	/* Round */
          ADD[ ]	/* Add */
          DUP[ ]	/* DuplicateTopStack */
          IF[ ]	/* If */
            DUP[ ]	/* DuplicateTopStack */
            ABS[ ]	/* Absolute */
            DIV[ ]	/* Divide */
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      19
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        SDPVTL[1]	/* SetDualPVectorToLine */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[1]	/* MeasureDistance */
        ABS[ ]	/* Absolute */
        SWAP[ ]	/* SwapTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        SPVTL[1]	/* SetPVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        32
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          ALIGNRP[ ]	/* AlignRelativePt */
        ELSE[ ]	/* Else */
          MDRP[00000]	/* MoveDirectRelPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      20
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 4 values pushed */
        0 64 1 64
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        SVTCA[1]	/* SetFPVectorToAxis */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHW[ ]	/* 1 value pushed */
        4096
        MUL[ ]	/* Multiply */
        SVTCA[0]	/* SetFPVectorToAxis */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHW[ ]	/* 1 value pushed */
        4096
        MUL[ ]	/* Multiply */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        NEQ[ ]	/* NotEqual */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            SWAP[ ]	/* SwapTopStack */
            DIV[ ]	/* Divide */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            0
            SWAP[ ]	/* SwapTopStack */
            WS[ ]	/* WriteStore */
          ELSE[ ]	/* Else */
            DIV[ ]	/* Divide */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            1
            SWAP[ ]	/* SwapTopStack */
            WS[ ]	/* WriteStore */
          EIF[ ]	/* EndIf */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 3 values pushed */
            0 32 0
            RS[ ]	/* ReadStore */
            MUL[ ]	/* Multiply */
            WS[ ]	/* WriteStore */
            PUSHB[ ]	/* 3 values pushed */
            1 32 1
            RS[ ]	/* ReadStore */
            MUL[ ]	/* Multiply */
            WS[ ]	/* WriteStore */
            PUSHB[ ]	/* 1 value pushed */
            32
            MUL[ ]	/* Multiply */
            PUSHB[ ]	/* 1 value pushed */
            25
            NEG[ ]	/* Negate */
            JMPR[ ]	/* Jump */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      21
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        1
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
    </assembly>
  </fpgm>

  <prep>
    <assembly>
      PUSHW[ ]	/* 1 value pushed */
      511
      SCANCTRL[ ]	/* ScanConversionControl */
      PUSHB[ ]	/* 1 value pushed */
      1
      SCANTYPE[ ]	/* ScanType */
      SVTCA[0]	/* SetFPVectorToAxis */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      8
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
        PUSHB[ ]	/* 2 values pushed */
        1 1
        INSTCTRL[ ]	/* SetInstrExecControl */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 2 values pushed */
      70 6
      CALL[ ]	/* CallFunction */
      IF[ ]	/* If */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 1 value pushed */
        16
      EIF[ ]	/* EndIf */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      20
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 1 value pushed */
        128
      EIF[ ]	/* EndIf */
      SCVTCI[ ]	/* SetCVTCutIn */
      PUSHB[ ]	/* 1 value pushed */
      6
      CALL[ ]	/* CallFunction */
      NOT[ ]	/* LogicalNot */
      IF[ ]	/* If */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      20
      CALL[ ]	/* CallFunction */
    </assembly>
  </prep>

  <cvt>
    <cv index="0" value="-220"/>
    <cv index="1" value="-10"/>
    <cv index="2" value="520"/>
    <cv index="3" value="730"/>
    <cv index="4" value="750"/>
    <cv index="5" value="33"/>
    <cv index="6" value="633"/>
  </cvt>

  <loca>
    <!-- The 'loca' table will be calculated by the compiler -->
  </loca>

  <glyf>

    <!-- The xMin, yMin, xMax and yMax values
         will be recalculated by the compiler. -->

    <TTGlyph name=".notdef"/><!-- contains no outline data -->

    <TTGlyph name="uni660E" xMin="90" yMin="-82" xMax="910" yMax="777">
      <contour>
        <pt x="585" y="477" on="1"/>
        <pt x="585" y="388" on="1"/>
        <pt x="585" y="353" on="0"/>
        <pt x="581" y="293" on="1"/>
        <pt x="833" y="293" on="1"/>
        <pt x="833" y="477" on="1"/>
      </contour>
      <contour>
        <pt x="585" y="542" on="1"/>
        <pt x="833" y="542" on="1"/>
        <pt x="833" y="710" on="1"/>
        <pt x="585" y="710" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="157" on="1"/>
        <pt x="165" y="93" on="1"/>
        <pt x="90" y="93" on="1"/>
        <pt x="90" y="760" on="1"/>
        <pt x="422" y="760" on="1"/>
        <pt x="422" y="157" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="432" on="1"/>
        <pt x="165" y="223" on="1"/>
        <pt x="350" y="223" on="1"/>
        <pt x="350" y="432" on="1"/>
      </contour>
      <contour>
        <pt x="165" y="498" on="1"/>
        <pt x="350" y="498" on="1"/>
        <pt x="350" y="692" on="1"/>
        <pt x="165" y="692" on="1"/>
      </contour>
      <contour>
        <pt x="820" y="-73" on="1"/>
        <pt x="788" y="-73" on="0"/>
        <pt x="680" y="-68" on="1"/>
        <pt x="677" y="0" on="1"/>
        <pt x="765" y="-5" on="0"/>
        <pt x="790" y="-5" on="1"/>
        <pt x="822" y="-5" on="0"/>
        <pt x="833" y="10" on="0"/>
        <pt x="833" y="53" on="1"/>
        <pt x="833" y="228" on="1"/>
        <pt x="574" y="228" on="1"/>
        <pt x="545" y="45" on="0"/>
        <pt x="409" y="-82" on="1"/>
        <pt x="351" y="-33" on="1"/>
        <pt x="441" y="52" on="0"/>
        <pt x="512" y="251" on="0"/>
        <pt x="512" y="422" on="1"/>
        <pt x="512" y="777" on="1"/>
        <pt x="910" y="777" on="1"/>
        <pt x="910" y="53" on="1"/>
        <pt x="910" y="-34" on="0"/>
        <pt x="883" y="-73" on="0"/>
      </contour>
      <instructions/>
    </TTGlyph>

  </glyf>

  <name>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x409">
      Copyright 2016 The M+ Project Authors.
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x409">
      Mplus 1p
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x409">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x409">
      1.061g;GoogleFonts;Mplus1p-Regular
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x409">
      Mplus 1p
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x409">
      Version 1.061
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x409">
      Mplus1p-Regular
    </namerecord>
  </name>

  <post>
    <formatType value="3.0"/>
    <italicAngle value="0.0"/>
    <underlinePosition value="-125"/>
    <underlineThickness value="50"/>
    <isFixedPitch value="0"/>
    <minMemType42 value="0"/>
    <maxMemType42 value="0"/>
    <minMemType1 value="0"/>
    <maxMemType1 value="0"/>
  </post>

  <gasp>
    <gaspRange rangeMaxPPEM="65535" rangeGaspBehavior="2"/>
  </gasp>

  <GDEF>
    <Version value="0x00010000"/>
    <GlyphClassDef>
      <ClassDef glyph="uni660E" class="1"/>
    </GlyphClassDef>
  </GDEF>

  <GPOS>
    <Version value="0x00010000"/>
    <ScriptList>
      <!-- ScriptCount=1 -->
      <ScriptRecord index="0">
        <ScriptTag value="DFLT"/>
        <Script>
          <DefaultLangSys>
            <ReqFeatureIndex value="65535"/>
            <!-- FeatureCount=0 -->
          </DefaultLangSys>
          <!-- LangSysCount=0 -->
        </Script>
      </ScriptRecord>
    </ScriptList>
    <FeatureList>
      <!-- FeatureCount=0 -->
    </FeatureList>
    <LookupList>
      <!-- LookupCount=0 -->
    </LookupList>
  </GPOS>

  <GSUB>
    <Version value="0x00010000"/>
    <ScriptList>
      <!-- ScriptCount=6 -->
      <ScriptRecord index="0">
        <ScriptTag value="DFLT"/>
        <Script>
          <DefaultLangSys>
            <ReqFeatureIndex value="65535"/>
            <!-- FeatureCount=0 -->
          </DefaultLangSys>
          <!-- LangSysCount=0 -->
        </Script>
      </ScriptRecord>
      <ScriptRecord index="1">
        <ScriptTag value="cyrl"/>
        <Script>
          <!-- LangSysCount=0 -->
        </Script>
      </ScriptRecord>
      <ScriptRecord index="2">
        <ScriptTag value="grek"/>
        <Script>
          <!-- LangSysCount=0 -->
        </Script>
      </ScriptRecord>
      <ScriptRecord index="3">
        <ScriptTag value="hani"/>
        <Script>
          <!-- LangSysCount=0 -->
        </Script>
      </ScriptRecord>
      <ScriptRecord index="4">
        <ScriptTag value="kana"/>
        <Script>
          <!-- LangSysCount=0 -->
        </Script>
      </ScriptRecord>
      <ScriptRecord index="5">
        <ScriptTag value="latn"/>
        <Script>
          <!-- LangSysCount=0 -->
        </Script>
      </ScriptRecord>
    </ScriptList>
    <FeatureList>
      <!-- FeatureCount=0 -->
    </FeatureList>
    <LookupList>
      <!-- LookupCount=0 -->
    </LookupList>
  </GSUB>

  <vhea>
    <tableVersion value="0x00011000"/>
    <ascent value="903"/>
    <descent value="-615"/>
    <lineGap value="90"/>
    <advanceHeightMax value="1000"/>
    <minTopSideBearing value="-215"/>
    <minBottomSideBearing value="-203"/>
    <yMaxExtent value="1203"/>
    <caretSlopeRise value="0"/>
    <caretSlopeRun value="1"/>
    <caretOffset value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <reserved4 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfVMetrics value="1"/>
  </vhea>

  <vmtx>
    <mtx name=".notdef" height="1000" tsb="666"/>
    <mtx name="uni660E" height="1000" tsb="83"/>
  </vmtx>

</ttFont>
